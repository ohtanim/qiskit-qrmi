# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
from enum import Enum

class QuantumResource:
    def __new__(cls, resource_id:builtins.str, resource_type:ResourceType) -> QuantumResource:
        r"""
        Construct a QuantumResource instance
        """
    def is_accessible(self) -> builtins.bool:
        r"""
        Returns true if device is accessible, otherwise false.
        """
    def acquire(self) -> builtins.str:
        r"""
        Acquires quantum resource and returns acquisition token if succeeded. If no one owns the lock, it acquires the lock and returns immediately. If another owns the lock, block until we are able to acquire lock.
        """
    def release(self, id:builtins.str) -> None:
        r"""
        Releases quantum resource
        
        # Arguments
        
        * `id`: acquisition token obtained by previous [`acquire()`](crate::QuantumResource::acquire) call.
        """
    def task_start(self, payload:Payload) -> builtins.str:
        r"""
        Start a task and returns an identifier of this task if succeeded.
        
        # Arguments
        
        * `payload`: payload for task execution. This might be serialized data or streaming.
        """
    def task_stop(self, task_id:builtins.str) -> None:
        r"""
        Stops the task specified by `task_id`. This function is called if the user cancels the job or if the time limit for job execution is exceeded. The implementation must cancel the task if it is still running.
        """
    def task_status(self, task_id:builtins.str) -> TaskStatus:
        r"""
        Returns the current status of the task specified by `task_id`.
        
        # Arguments
        
        * `task_id`: Identifier of the task to be stopped.
        """
    def task_result(self, task_id:builtins.str) -> TaskResult:
        r"""
        Returns the results of the task.
        
        # Arguments
        
        * `task_id`: Identifier of the task.
        """
    def target(self) -> Target:
        r"""
        Returns a Target for the specified device. Vendor specific serialized data. This might contain the constraints(instructions, properteis and timing information etc.) of a particular device to allow compilers to compile an input circuit to something that works and is optimized for a device. In IBM implementation, it contains JSON representations of [BackendConfiguration](https://github.com/Qiskit/ibm-quantum-schemas/blob/main/schemas/backend_configuration_schema.json) and [BackendProperties](https://github.com/Qiskit/ibm-quantum-schemas/blob/main/schemas/backend_properties_schema.json) so that we are able to create a Target object by calling `qiskit_ibm_runtime.utils.backend_converter.convert_to_target` or uquivalent functions.
        """
    def metadata(self) -> builtins.dict[builtins.str, builtins.str]:
        r"""
        Returns other specific to system or device data
        """

class Target:
    r"""
    A Target that contains the constraints(supported instructions, properties etc.) of a particular quantum device
    """
    value: builtins.str
    r"""
    Serialized data
    """

class TaskResult:
    r"""
    Task result
    """
    value: builtins.str
    r"""
    Serialized data of result
    """

class Payload(Enum):
    r"""
    Task Payload
    """
    QiskitPrimitive = ...
    r"""
    Payload that contains Qiskit Primitive input.
    """
    PasqalCloud = ...
    r"""
    Payload for Pasqal Cloud
    """

class ResourceType(Enum):
    r"""
    Quantum Resource Types
    """
    IBMDirectAccess = ...
    IBMQiskitRuntimeService = ...
    PasqalCloud = ...

class TaskStatus(Enum):
    r"""
    Task statuses.
    """
    Queued = ...
    r"""
    Task is queued
    """
    Running = ...
    r"""
    Task is running
    """
    Completed = ...
    r"""
    Task was completed
    """
    Failed = ...
    r"""
    Task was failed
    """
    Cancelled = ...
    r"""
    Task was cancelled
    """

